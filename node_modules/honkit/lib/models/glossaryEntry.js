"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const immutable_1 = __importDefault(require("immutable"));
const github_slugid_1 = __importDefault(require("github-slugid"));
/*
    A definition represents an entry in the glossary
*/
const GlossaryEntry = immutable_1.default.Record({
    name: String(),
    description: String(),
});
GlossaryEntry.prototype.getName = function () {
    return this.get("name");
};
GlossaryEntry.prototype.getDescription = function () {
    return this.get("description");
};
/**
 Get identifier for this entry

 @retrun {Boolean}
 */
GlossaryEntry.prototype.getID = function () {
    // @ts-expect-error ts-migrate(2339) FIXME: Property 'nameToID' does not exist on type 'Class'... Remove this comment to see the full error message
    return GlossaryEntry.nameToID(this.getName());
};
/**
 Normalize a glossary entry name into a unique id

 @param {String}
 @return {String}
 */
// @ts-expect-error ts-migrate(2339) FIXME: Property 'nameToID' does not exist on type 'Class'... Remove this comment to see the full error message
GlossaryEntry.nameToID = function nameToID(name) {
    return github_slugid_1.default(name);
};
exports.default = GlossaryEntry;
