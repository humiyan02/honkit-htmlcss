"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const immutable_1 = __importDefault(require("immutable"));
const promise_1 = __importDefault(require("../utils/promise"));
const Parser = immutable_1.default.Record({
    name: String(),
    // List of extensions that can be processed using this parser
    extensions: immutable_1.default.List(),
    // Parsing functions
    readme: Function(),
    langs: Function(),
    summary: Function(),
    glossary: Function(),
    page: Function(),
    inline: Function(),
});
Parser.prototype.getName = function () {
    return this.get("name");
};
Parser.prototype.getExtensions = function () {
    return this.get("extensions");
};
// PARSE
Parser.prototype.parseReadme = function (content) {
    const readme = this.get("readme");
    return promise_1.default(readme(content));
};
Parser.prototype.parseSummary = function (content) {
    const summary = this.get("summary");
    return promise_1.default(summary(content));
};
Parser.prototype.parseGlossary = function (content) {
    const glossary = this.get("glossary");
    return promise_1.default(glossary(content));
};
Parser.prototype.preparePage = function (content) {
    const page = this.get("page");
    if (!page.prepare) {
        return promise_1.default(content);
    }
    return promise_1.default(page.prepare(content));
};
Parser.prototype.parsePage = function (content) {
    const page = this.get("page");
    return promise_1.default(page(content));
};
Parser.prototype.parseInline = function (content) {
    const inline = this.get("inline");
    return promise_1.default(inline(content));
};
Parser.prototype.parseLanguages = function (content) {
    const langs = this.get("langs");
    return promise_1.default(langs(content));
};
Parser.prototype.parseInline = function (content) {
    const inline = this.get("inline");
    return promise_1.default(inline(content));
};
// TO TEXT
Parser.prototype.renderLanguages = function (content) {
    const langs = this.get("langs");
    return promise_1.default(langs.toText(content));
};
Parser.prototype.renderSummary = function (content) {
    const summary = this.get("summary");
    return promise_1.default(summary.toText(content));
};
Parser.prototype.renderGlossary = function (content) {
    const glossary = this.get("glossary");
    return promise_1.default(glossary.toText(content));
};
/**
 Test if this parser matches an extension

 @param {String} ext
 @return {Boolean}
 */
Parser.prototype.matchExtension = function (ext) {
    const exts = this.getExtensions();
    return exts.includes(ext.toLowerCase());
};
/**
 Create a new parser using a module (gitbook-markdown, etc)

 @param {String} name
 @param {Array<String>} extensions
 @param {Object} module
 @return {Parser}
 */
// @ts-expect-error ts-migrate(2339) FIXME: Property 'create' does not exist on type 'Class'.
Parser.create = function (name, extensions, module) {
    return new Parser({
        name: name,
        extensions: immutable_1.default.List(extensions),
        readme: module.readme,
        langs: module.langs,
        summary: module.summary,
        glossary: module.glossary,
        page: module.page,
        inline: module.inline,
    });
};
exports.default = Parser;
