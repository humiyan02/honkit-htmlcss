"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const immutable_1 = __importDefault(require("immutable"));
const logger_1 = __importDefault(require("../utils/logger"));
const fs_1 = __importDefault(require("./fs"));
const config_1 = __importDefault(require("./config"));
const readme_1 = __importDefault(require("./readme"));
const summary_1 = __importDefault(require("./summary"));
const glossary_1 = __importDefault(require("./glossary"));
const languages_1 = __importDefault(require("./languages"));
const ignore_1 = __importDefault(require("./ignore"));
const Book = immutable_1.default.Record({
    // Logger for outptu message
    // @ts-expect-error ts-migrate(2554) FIXME: Expected 2 arguments, but got 0.
    logger: logger_1.default(),
    // Filesystem binded to the book scope to read files/directories
    fs: fs_1.default(),
    // Ignore files parser
    ignore: ignore_1.default(),
    // Structure files
    config: config_1.default(),
    readme: readme_1.default(),
    summary: summary_1.default(),
    glossary: glossary_1.default(),
    languages: languages_1.default(),
    // ID of the language for language books
    language: String(),
    // List of children, if multilingual (String -> Book)
    books: immutable_1.default.OrderedMap(),
});
Book.prototype.getLogger = function () {
    return this.get("logger");
};
Book.prototype.getFS = function () {
    return this.get("fs");
};
Book.prototype.getIgnore = function () {
    return this.get("ignore");
};
Book.prototype.getConfig = function () {
    return this.get("config");
};
Book.prototype.getReadme = function () {
    return this.get("readme");
};
Book.prototype.getSummary = function () {
    return this.get("summary");
};
Book.prototype.getGlossary = function () {
    return this.get("glossary");
};
Book.prototype.getLanguages = function () {
    return this.get("languages");
};
Book.prototype.getBooks = function () {
    return this.get("books");
};
Book.prototype.getLanguage = function () {
    return this.get("language");
};
/**
 Return FS instance to access the content

 @return {FS}
 */
Book.prototype.getContentFS = function () {
    const fs = this.getFS();
    const config = this.getConfig();
    const rootFolder = config.getValue("root");
    if (rootFolder) {
        // @ts-expect-error ts-migrate(2339) FIXME: Property 'reduceScope' does not exist on type 'Cla... Remove this comment to see the full error message
        return fs_1.default.reduceScope(fs, rootFolder);
    }
    return fs;
};
/**
 Return root of the book

 @return {String}
 */
Book.prototype.getRoot = function () {
    const fs = this.getFS();
    return fs.getRoot();
};
/**
 Return root for content of the book

 @return {String}
 */
Book.prototype.getContentRoot = function () {
    const fs = this.getContentFS();
    return fs.getRoot();
};
/**
 Check if a file is ignore (should not being parsed, etc)

 @param {String} ref
 @return {Page|undefined}
 */
Book.prototype.isFileIgnored = function (filename) {
    const ignore = this.getIgnore();
    const language = this.getLanguage();
    // Ignore is always relative to the root of the main book
    if (language) {
        filename = path_1.default.join(language, filename);
    }
    return ignore.isFileIgnored(filename);
};
/**
 Check if a content file is ignore (should not being parsed, etc)

 @param {String} ref
 @return {Page|undefined}
 */
Book.prototype.isContentFileIgnored = function (filename) {
    const config = this.getConfig();
    const rootFolder = config.getValue("root");
    if (rootFolder) {
        filename = path_1.default.join(rootFolder, filename);
    }
    return this.isFileIgnored(filename);
};
/**
 Return a page from a book by its path

 @param {String} ref
 @return {Page|undefined}
 */
Book.prototype.getPage = function (ref) {
    return this.getPages().get(ref);
};
/**
 Is this book the parent of language's books

 @return {Boolean}
 */
Book.prototype.isMultilingual = function () {
    return this.getLanguages().getCount() > 0;
};
/**
 Return true if book is associated to a language

 @return {Boolean}
 */
Book.prototype.isLanguageBook = function () {
    return Boolean(this.getLanguage());
};
/**
 Return a languages book

 @param {String} language
 @return {Book}
 */
Book.prototype.getLanguageBook = function (language) {
    const books = this.getBooks();
    return books.get(language);
};
/**
 Add a new language book

 @param {String} language
 @param {Book} book
 @return {Book}
 */
Book.prototype.addLanguageBook = function (language, book) {
    let books = this.getBooks();
    books = books.set(language, book);
    return this.set("books", books);
};
/**
 Set the summary for this book

 @param {Summary}
 @return {Book}
 */
Book.prototype.setSummary = function (summary) {
    return this.set("summary", summary);
};
/**
 Set the readme for this book

 @param {Readme}
 @return {Book}
 */
Book.prototype.setReadme = function (readme) {
    return this.set("readme", readme);
};
/**
 Set the configuration for this book

 @param {Config}
 @return {Book}
 */
Book.prototype.setConfig = function (config) {
    return this.set("config", config);
};
/**
 Set the ignore instance for this book

 @param {Ignore}
 @return {Book}
 */
Book.prototype.setIgnore = function (ignore) {
    return this.set("ignore", ignore);
};
/**
 Change log level

 @param {String} level
 @return {Book}
 */
Book.prototype.setLogLevel = function (level) {
    this.getLogger().setLevel(level);
    return this;
};
/**
 Create a book using a filesystem

 @param {FS} fs
 @return {Book}
 */
// @ts-expect-error ts-migrate(2339) FIXME: Property 'createForFS' does not exist on type 'Cla... Remove this comment to see the full error message
Book.createForFS = function createForFS(fs) {
    return new Book({
        fs: fs,
    });
};
/**
 Infers the default extension for files
 @return {String}
 */
Book.prototype.getDefaultExt = function () {
    // Inferring sources
    const clues = [this.getReadme(), this.getSummary(), this.getGlossary()];
    // List their extensions
    const exts = clues.map((clue) => {
        const file = clue.getFile();
        if (file.exists()) {
            return file.getParser().getExtensions().first();
        }
        else {
            return null;
        }
    });
    // Adds the general default extension
    exts.push(".md");
    // Choose the first non null
    return exts.find((e) => {
        return e !== null;
    });
};
/**
 Infer the default path for a Readme.
 @param {Boolean} [absolute=false] False for a path relative to
 this book's content root
 @return {String}
 */
Book.prototype.getDefaultReadmePath = function (absolute) {
    const defaultPath = `README${this.getDefaultExt()}`;
    if (absolute) {
        return path_1.default.join(this.getContentRoot(), defaultPath);
    }
    else {
        return defaultPath;
    }
};
/**
 Infer the default path for a Summary.
 @param {Boolean} [absolute=false] False for a path relative to
 this book's content root
 @return {String}
 */
Book.prototype.getDefaultSummaryPath = function (absolute) {
    const defaultPath = `SUMMARY${this.getDefaultExt()}`;
    if (absolute) {
        return path_1.default.join(this.getContentRoot(), defaultPath);
    }
    else {
        return defaultPath;
    }
};
/**
 Infer the default path for a Glossary.
 @param {Boolean} [absolute=false] False for a path relative to
 this book's content root
 @return {String}
 */
Book.prototype.getDefaultGlossaryPath = function (absolute) {
    const defaultPath = `GLOSSARY${this.getDefaultExt()}`;
    if (absolute) {
        return path_1.default.join(this.getContentRoot(), defaultPath);
    }
    else {
        return defaultPath;
    }
};
/**
 Create a language book from a parent

 @param {Book} parent
 @param {String} language
 @return {Book}
 */
// @ts-expect-error ts-migrate(2339) FIXME: Property 'createFromParent' does not exist on type... Remove this comment to see the full error message
Book.createFromParent = function createFromParent(parent, language) {
    const ignore = parent.getIgnore();
    let config = parent.getConfig();
    // Set language in configuration
    config = config.setValue("language", language);
    return new Book({
        // Inherits config. logegr and list of ignored files
        logger: parent.getLogger(),
        config: config,
        ignore: ignore,
        language: language,
        // @ts-expect-error ts-migrate(2339) FIXME: Property 'reduceScope' does not exist on type 'Cla... Remove this comment to see the full error message
        fs: fs_1.default.reduceScope(parent.getContentFS(), language),
    });
};
exports.default = Book;
